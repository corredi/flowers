/*
 * This file is generated by jOOQ.
 */
package com.accenture.flowershop.be.entity.jooqent.public_.tables.records;


import com.accenture.flowershop.be.entity.jooqent.public_.tables.Flower;

import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlowerRecord extends UpdatableRecordImpl<FlowerRecord> implements Record3<String, BigDecimal, Integer> {

    private static final long serialVersionUID = -520503521;

    /**
     * Setter for <code>PUBLIC.FLOWER.NAME</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.FLOWER.NAME</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.FLOWER.COST</code>.
     */
    public void setCost(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.FLOWER.COST</code>.
     */
    public BigDecimal getCost() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>PUBLIC.FLOWER.STOCK</code>.
     */
    public void setStock(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.FLOWER.STOCK</code>.
     */
    public Integer getStock() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, BigDecimal, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, BigDecimal, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Flower.FLOWER.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigDecimal> field2() {
        return Flower.FLOWER.COST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Flower.FLOWER.STOCK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal component2() {
        return getCost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getStock();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal value2() {
        return getCost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getStock();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowerRecord value1(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowerRecord value2(BigDecimal value) {
        setCost(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowerRecord value3(Integer value) {
        setStock(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FlowerRecord values(String value1, BigDecimal value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FlowerRecord
     */
    public FlowerRecord() {
        super(Flower.FLOWER);
    }

    /**
     * Create a detached, initialised FlowerRecord
     */
    public FlowerRecord(String name, BigDecimal cost, Integer stock) {
        super(Flower.FLOWER);

        set(0, name);
        set(1, cost);
        set(2, stock);
    }
}
