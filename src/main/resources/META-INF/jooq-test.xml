<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jaxws="http://cxf.apache.org/jaxws"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="
        http://cxf.apache.org/jaxws
        http://cxf.apache.org/schemas/jaxws.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		">

    <context:component-scan
            base-package="com.accenture.flowershop.be.access, com.accenture.flowershop.fe.REST, com.accenture.flowershop.fe.SOAP"/>
    <context:annotation-config/>

    <bean id="FlowerStockWebServiceImpl" class="com.accenture.flowershop.fe.SOAP.FlowerStockWebServiceImpl"/>
    <jaxws:endpoint id="FlowerStockWebService" implementor="#FlowerStockWebServiceImpl"
                    address="/FlowerStockWebServiceImpl"/>

    <bean id="XMLConverter" class="com.accenture.flowershop.be.business.XMLConverter">
        <property name="marshaller" ref="castorMarshaller"/>
        <property name="unmarshaller" ref="castorMarshaller"/>
    </bean>
    <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller">
        <property name="targetClasses">
            <array>
                <value>com.accenture.flowershop.fe.dto.user.DiscountDTO</value>
                <value>com.accenture.flowershop.fe.dto.user.CustomerDTO</value>
            </array>
        </property>
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:~/test"/>
        <property name="username" value="sa"/>
        <property name="password" value="test"/>
    </bean>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:packagesToScan="com.accenture.flowershop.be.entity"
          p:dataSource-ref="dataSource">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform" value="org.hibernate.dialect.H2Dialect"/>
               <!-- <property name="databasePlatform" value="org.hibernate.dialect.PostgreSQLDialect" />-->
                <property name="generateDdl" value="true"/>
                <property name="showSql" value="true"/>
            </bean>
        </property>
    </bean>
    <!--
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy,
        which can dynamically discover the transaction context -->
    <bean id="transactionAwareDataSource"
          class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSource" />
    </bean>

    <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
        <constructor-arg ref="transactionAwareDataSource" />
    </bean>
    <bean id="settings" class="org.jooq.conf.Settings">
        <property name="renderCatalog" value="false"/>
        <property name="renderSchema" value="false"/>
        <property name="renderFormatted" value="false"/>
    </bean>
    <!--
    <bean id="configur" class="org.jooq.impl.DefaultConfiguration">
        <property name="settings" ref="settings"/>
    </bean>
    -->
    <!-- Configure the DSL object, optionally overriding jOOQ Exceptions with Spring Exceptions -->
    <bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
        <constructor-arg ref="config" />

    </bean>

    <bean id="exceptionTranslator" class="com.accenture.flowershop.be.access.jooq.ExceptionTranslator" />
    <bean class="org.jooq.impl.DefaultConfiguration" name="config">
        <property name="SQLDialect"><value type="org.jooq.SQLDialect">H2</value></property>
        <property name="connectionProvider" ref="connectionProvider" />
        <property name="executeListenerProvider">
            <array>
                <bean class="org.jooq.impl.DefaultExecuteListenerProvider">
                    <constructor-arg index="0" ref="exceptionTranslator"/>
                </bean>
            </array>
        </property>
        <property name="settings" ref="settings"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
<!--
    <jee:jndi-lookup id="connectionFactory" jndi-name="jms/connectionFactory"/>
    <jee:jndi-lookup id="outQueue" jndi-name="jms/outQueue"/>
    <jee:jndi-lookup id="inQueue" jndi-name="jms/inQueue"/>
-->
    <jpa:repositories base-package="com.accenture.flowershop.be.access.repositories"/>
</beans>
